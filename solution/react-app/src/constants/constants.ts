import MessiImage from "../assets/messi.jpg";
import {Player, PlayerSearchFilters} from "./types";
import DummyProfileImage from "../assets/messi.jpg";
import {QueryFilters} from "../pages/games/Games";

/**
 * GENERIC CONSTANTS AND FUNCTIONS
 */
export const BASE_URL = "http://localhost:8000";
export const WINDOWPHONESIZE = 600;

export const HOME_SECTIONS = {
  HOME: {
    name: "Tome",
    linkLabel: "Home",
  },
  TEAMS: {
    name: "Teams",
    linkLabel: "Teams",
  },
  MATCHES: {
    name: "Matches",
    linkLabel: "Matches",
  },
  GAMES: {
    name: "Games",
    linkLabel: "/games",
  },
  PLAYERS: {
    name: "Players",
    linkLabel: "/players",
  }

};

export const LOREM_IPSUM =
  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisl eget ultricies aliquam, nunc nisl aliquet nunc, vitae aliquam nis";


export const ROUTES = {
  AUTH: '/auth',
  HOME: '/',
  CLUBS: '/clubs',
  PLAYERS: "/players",
  CHAT: '/chat',
  PLAYER_INFO: 'player/:id',
  CLUB_INFO: "club/:id",
  GAMES: "/games",
  DEFAULT: "*",
}

export const sliceArray = <T>(array: T[], size: number): T[][] => {
  if (!Array.isArray(array)) {
    throw new Error("Input 'array' must be an array.");
  }
  if (!Number.isInteger(size) || size <= 0) {
    throw new Error("Input 'size' must be a positive integer.");
  }
  if (array.length === 0 || size <= 0) {
    return [[]];
  }
  const slicedArray: T[][] = [];
  const numChunks = Math.ceil(array.length / size);
  for (let i = 0; i < numChunks; i++) {
    slicedArray.push(array.slice(i * size, (i + 1) * size));
  }
  return slicedArray;
};


export const numberFormatWithCommas = (n: string): string => {
    return n.replace(/\B(?=(\d{3})+(?!\d))/g, "à¥±");

}

export const MilionFormat = (n:string):string => {
  console.log({n})
  if(n===null || n.trim().length === 0 || n === "null") return "NOT PROVIDED";
  let num = Math.round(Number(n)/1000000);
  let numStr = num.toString();
  let formattedNumStr = numberFormatWithCommas(numStr);
  return formattedNumStr + "m";
}

export const calculateAgeFromDateBirth = (dateOfBirth:string):number => {
  const today = new Date();
  const birthDate = new Date(dateOfBirth);
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDifference = today.getMonth() - birthDate.getMonth();
  if(monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())){
    age--;
  }
  return age;
}



export const identity = (value:any) => value;

export const xor = (a:boolean,b:boolean) => {
    return (a || b) && !(a && b);
}

export const competitionTypes = [
  {value : 'domestic_cup'  ,key : "DC"},
  {value: 'domestic_league', key: "DL"},
  {value: 'international_cup' , key: "IC"},
  {value: 'other' , key: "O"},
];


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * FORM STATES
 */
export const playerfilterFormState = {
  name: {
    value: "",
    error: false,
    errorText: "Name must be at least 3 characters long",
    validate: (_: string) => true,
  },
  age: {
    value: "",
    error: false,
    errorText: "Age must be a number",
    validate: (value: string) => !isNaN(Number(value)),
  },
  scoreMin: {
    value: "",
    error: false,
    errorText: "Score must be a number",
    validate: (value: string) => !isNaN(Number(value)),
  },
  scoreMax: {
    value: "",
    error: false,
    errorText: "Score must be a number",
    validate: (value: string) => !isNaN(Number(value)),
  },
};

export const teamfilterFormState = {
  name: {
    value: "",
    error: false,
    errorText: "Name must be at least 3 characters long",
    validate: (_: string) => true,
  },
  competitionName: {
    value: "",
    error: false,
    errorText: "Competition name must be at least 3 characters long",
    validate: (_: string) => true,
  },

};

const passwordRegexValidation = (value: string): boolean => {
  return (
    value.length >= 6 &&
    value.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{6,}$/) !==
      null
  );
};

const dummyPassworValidation = (value: string): boolean => {
  return value.length >= 6;
};
export const initialSignInState = {
  email: {
    value: "",
    error: false,
    errorText: "please type a valid email",
    validate: (value: string) => {
      return value.match(/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/) !== null;
    },
  },
  password: {
    type: "password",
    value: "",
    error: false,
    errorText:
      "password must be at least 6 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character",
    validate: dummyPassworValidation,
  },
};
export const initialSignUpState = {
  name: {
    value: "",
    error: false,
    errorText: "username must be at least 6 characters long",
    validate: (value: string) => {
      return value.length >= 0;
    },
  },
  surname: {
    value: "",
    error: false,
    errorText: "username must be at least 6 characters long",
    validate: (value: string) => {
      return value.length >= 0;
    },
  },
  password: {
    value: "",
    type: "password",
    error: false,
    errorText:
      "password must be at least 6 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character",
    validate: passwordRegexValidation,
  },
  confirmPassword: {
    value: "",
    type: "password",
    error: false,
    errorText:
      "password must be at least 6 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character",
    validate: passwordRegexValidation,
  },
  email: {
    value: "",
    error: false,
    errorText: "email must be valid",
    validate: (value: string) => {
      return value.match(/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/) !== null;
    },
  },
};
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * DUMMY DATA
 */


/**
 * generata bellamente da chatgpt
 */
export const countryEmojis:{[country:string] : string} = {
  "afghanistan": "ğŸ‡¦ğŸ‡«",
  "albania": "ğŸ‡¦ğŸ‡±",
  "algeria": "ğŸ‡©ğŸ‡¿",
  "andorra": "ğŸ‡¦ğŸ‡©",
  "angola": "ğŸ‡¦ğŸ‡´",
  "antigua and barbuda": "ğŸ‡¦ğŸ‡¬",
  "argentina": "ğŸ‡¦ğŸ‡·",
  "armenia": "ğŸ‡¦ğŸ‡²",
  "australia": "ğŸ‡¦ğŸ‡º",
  "austria": "ğŸ‡¦ğŸ‡¹",
  "azerbaijan": "ğŸ‡¦ğŸ‡¿",
  "bahamas": "ğŸ‡§ğŸ‡¸",
  "bahrain": "ğŸ‡§ğŸ‡­",
  "bangladesh": "ğŸ‡§ğŸ‡©",
  "barbados": "ğŸ‡§ğŸ‡§",
  "belarus": "ğŸ‡§ğŸ‡¾",
  "belgium": "ğŸ‡§ğŸ‡ª",
  "belize": "ğŸ‡§ğŸ‡¿",
  "benin": "ğŸ‡§ğŸ‡¯",
  "bhutan": "ğŸ‡§ğŸ‡¹",
  "bolivia": "ğŸ‡§ğŸ‡´",
  "bosnia and herzegovina": "ğŸ‡§ğŸ‡¦",
  "botswana": "ğŸ‡§ğŸ‡¼",
  "brazil": "ğŸ‡§ğŸ‡·",
  "brunei": "ğŸ‡§ğŸ‡³",
  "bulgaria": "ğŸ‡§ğŸ‡¬",
  "burkina faso": "ğŸ‡§ğŸ‡«",
  "burundi": "ğŸ‡§ğŸ‡®",
  "cabo verde": "ğŸ‡¨ğŸ‡»",
  "cambodia": "ğŸ‡°ğŸ‡­",
  "cameroon": "ğŸ‡¨ğŸ‡²",
  "canada": "ğŸ‡¨ğŸ‡¦",
  "central african republic": "ğŸ‡¨ğŸ‡«",
  "chad": "ğŸ‡¹ğŸ‡©",
  "chile": "ğŸ‡¨ğŸ‡±",
  "china": "ğŸ‡¨ğŸ‡³",
  "colombia": "ğŸ‡¨ğŸ‡´",
  "comoros": "ğŸ‡°ğŸ‡²",
  "congo, democratic republic of the": "ğŸ‡¨ğŸ‡©",
  "congo, republic of the": "ğŸ‡¨ğŸ‡¬",
  "costa rica": "ğŸ‡¨ğŸ‡·",
  "croatia": "ğŸ‡­ğŸ‡·",
  "cuba": "ğŸ‡¨ğŸ‡º",
  "cyprus": "ğŸ‡¨ğŸ‡¾",
  "czech republic": "ğŸ‡¨ğŸ‡¿",
  "denmark": "ğŸ‡©ğŸ‡°",
  "djibouti": "ğŸ‡©ğŸ‡¯",
  "dominica": "ğŸ‡©ğŸ‡²",
  "dominican republic": "ğŸ‡©ğŸ‡´",
  "ecuador": "ğŸ‡ªğŸ‡¨",
  "egypt": "ğŸ‡ªğŸ‡¬",
  "el salvador": "ğŸ‡¸ğŸ‡»",
  "equatorial guinea": "ğŸ‡¬ğŸ‡¶",
  "eritrea": "ğŸ‡ªğŸ‡·",
  "estonia": "ğŸ‡ªğŸ‡ª",
  "eswatini": "ğŸ‡¸ğŸ‡¿",
  "ethiopia": "ğŸ‡ªğŸ‡¹",
  "fiji": "ğŸ‡«ğŸ‡¯",
  "finland": "ğŸ‡«ğŸ‡®",
  "france": "ğŸ‡«ğŸ‡·",
  "gabon": "ğŸ‡¬ğŸ‡¦",
  "gambia": "ğŸ‡¬ğŸ‡²",
  "georgia": "ğŸ‡¬ğŸ‡ª",
  "germany": "ğŸ‡©ğŸ‡ª",
  "ghana": "ğŸ‡¬ğŸ‡­",
  "greece": "ğŸ‡¬ğŸ‡·",
  "grenada": "ğŸ‡¬ğŸ‡©",
  "guatemala": "ğŸ‡¬ğŸ‡¹",
  "guinea": "ğŸ‡¬ğŸ‡³",
  "guinea-bissau": "ğŸ‡¬ğŸ‡¼",
  "guyana": "ğŸ‡¬ğŸ‡¾",
  "haiti": "ğŸ‡­ğŸ‡¹",
  "honduras": "ğŸ‡­ğŸ‡³",
  "hungary": "ğŸ‡­ğŸ‡º",
  "iceland": "ğŸ‡®ğŸ‡¸",
  "india": "ğŸ‡®ğŸ‡³",
  "indonesia": "ğŸ‡®ğŸ‡©",
  "iran": "ğŸ‡®ğŸ‡·",
  "iraq": "ğŸ‡®ğŸ‡¶",
  "ireland": "ğŸ‡®ğŸ‡ª",
  "israel": "ğŸ‡®ğŸ‡±",
  "italy": "ğŸ‡®ğŸ‡¹",
  "jamaica": "ğŸ‡¯ğŸ‡²",
  "japan": "ğŸ‡¯ğŸ‡µ",
  "jordan": "ğŸ‡¯ğŸ‡´",
  "kazakhstan": "ğŸ‡°ğŸ‡¿",
  "kenya": "ğŸ‡°ğŸ‡ª",
  "kiribati": "ğŸ‡°ğŸ‡®",
  "kuwait": "ğŸ‡°ğŸ‡¼",
  "kyrgyzstan": "ğŸ‡°ğŸ‡¬",
  "laos": "ğŸ‡±ğŸ‡¦",
  "latvia": "ğŸ‡±ğŸ‡»",
  "lebanon": "ğŸ‡±ğŸ‡§",
  "lesotho": "ğŸ‡±ğŸ‡¸",
  "liberia": "ğŸ‡±ğŸ‡·",
  "libya": "ğŸ‡±ğŸ‡¾",
  "liechtenstein": "ğŸ‡±ğŸ‡®",
  "lithuania": "ğŸ‡±ğŸ‡¹",
  "luxembourg": "ğŸ‡±ğŸ‡º",
  "madagascar": "ğŸ‡²ğŸ‡¬",
  "malawi": "ğŸ‡²ğŸ‡¼",
  "malaysia": "ğŸ‡²ğŸ‡¾",
  "maldives": "ğŸ‡²ğŸ‡»",
  "mali": "ğŸ‡²ğŸ‡±",
  "malta": "ğŸ‡²ğŸ‡¹",
  "marshall islands": "ğŸ‡²ğŸ‡­",
  "mauritania": "ğŸ‡²ğŸ‡·",
  "mauritius": "ğŸ‡²ğŸ‡º",
  "mexico": "ğŸ‡²ğŸ‡½",
  "micronesia": "ğŸ‡«ğŸ‡²",
  "moldova": "ğŸ‡²ğŸ‡©",
  "monaco": "ğŸ‡²ğŸ‡¨",
  "mongolia": "ğŸ‡²ğŸ‡³",
  "montenegro": "ğŸ‡²ğŸ‡ª",
  "morocco": "ğŸ‡²ğŸ‡¦",
  "mozambique": "ğŸ‡²ğŸ‡¿",
  "myanmar": "ğŸ‡²ğŸ‡²",
  "namibia": "ğŸ‡³ğŸ‡¦",
  "nauru": "ğŸ‡³ğŸ‡·",
  "nepal": "ğŸ‡³ğŸ‡µ",
  "netherlands": "ğŸ‡³ğŸ‡±",
  "new zealand": "ğŸ‡³ğŸ‡¿",
  "nicaragua": "ğŸ‡³ğŸ‡®",
  "niger": "ğŸ‡³ğŸ‡ª",
  "nigeria": "ğŸ‡³ğŸ‡¬",
  "north korea": "ğŸ‡°ğŸ‡µ",
  "north macedonia": "ğŸ‡²ğŸ‡°",
  "norway": "ğŸ‡³ğŸ‡´",
  "oman": "ğŸ‡´ğŸ‡²",
  "pakistan": "ğŸ‡µğŸ‡°",
  "palau": "ğŸ‡µğŸ‡¼",
  "palestine": "ğŸ‡µğŸ‡¸",
  "panama": "ğŸ‡µğŸ‡¦",
  "papua new guinea": "ğŸ‡µğŸ‡¬",
  "paraguay": "ğŸ‡µğŸ‡¾",
  "peru": "ğŸ‡µğŸ‡ª",
  "philippines": "ğŸ‡µğŸ‡­",
  "poland": "ğŸ‡µğŸ‡±",
  "portugal": "ğŸ‡µğŸ‡¹",
  "qatar": "ğŸ‡¶ğŸ‡¦",
  "romania": "ğŸ‡·ğŸ‡´",
  "russia": "ğŸ‡·ğŸ‡º",
  "rwanda": "ğŸ‡·ğŸ‡¼",
  "saint kitts and nevis": "ğŸ‡°ğŸ‡³",
  "saint lucia": "ğŸ‡±ğŸ‡¨",
  "saint vincent and the grenadines": "ğŸ‡»ğŸ‡¨",
  "samoa": "ğŸ‡¼ğŸ‡¸",
  "san marino": "ğŸ‡¸ğŸ‡²",
  "sao tome and principe": "ğŸ‡¸ğŸ‡¹",
  "saudi arabia": "ğŸ‡¸ğŸ‡¦",
  "senegal": "ğŸ‡¸ğŸ‡³",
  "serbia": "ğŸ‡·ğŸ‡¸",
  "seychelles": "ğŸ‡¸ğŸ‡¨",
  "sierra leone": "ğŸ‡¸ğŸ‡±",
  "singapore": "ğŸ‡¸ğŸ‡¬",
  "slovakia": "ğŸ‡¸ğŸ‡°",
  "slovenia": "ğŸ‡¸ğŸ‡®",
  "solomon islands": "ğŸ‡¸ğŸ‡§",
  "somalia": "ğŸ‡¸ğŸ‡´",
  "south africa": "ğŸ‡¿ğŸ‡¦",
  "south korea": "ğŸ‡°ğŸ‡·",
  "south sudan": "ğŸ‡¸ğŸ‡¸",
  "spain": "ğŸ‡ªğŸ‡¸",
  "sri lanka": "ğŸ‡±ğŸ‡°",
  "sudan": "ğŸ‡¸ğŸ‡©",
  "suriname": "ğŸ‡¸ğŸ‡·",
  "sweden": "ğŸ‡¸ğŸ‡ª",
  "switzerland": "ğŸ‡¨ğŸ‡­",
  "syria": "ğŸ‡¸ğŸ‡¾",
  "taiwan": "ğŸ‡¹ğŸ‡¼",
  "tajikistan": "ğŸ‡¹ğŸ‡¯",
  "tanzania": "ğŸ‡¹ğŸ‡¿",
  "thailand": "ğŸ‡¹ğŸ‡­",
  "timor-leste": "ğŸ‡¹ğŸ‡±",
  "togo": "ğŸ‡¹ğŸ‡¬",
  "tonga": "ğŸ‡¹ğŸ‡´",
  "trinidad and tobago": "ğŸ‡¹ğŸ‡¹",
  "tunisia": "ğŸ‡¹ğŸ‡³",
  "turkey": "ğŸ‡¹ğŸ‡·",
  "turkmenistan": "ğŸ‡¹ğŸ‡²",
  "tuvalu": "ğŸ‡¹ğŸ‡»",
  "uganda": "ğŸ‡ºğŸ‡¬",
  "ukraine": "ğŸ‡ºğŸ‡¦",
  "united arab emirates": "ğŸ‡¦ğŸ‡ª",
  "united kingdom": "ğŸ‡¬ğŸ‡§",
  "united states": "ğŸ‡ºğŸ‡¸",
  "uruguay": "ğŸ‡ºğŸ‡¾",
  "uzbekistan": "ğŸ‡ºğŸ‡¿",
  "vanuatu": "ğŸ‡»ğŸ‡º",
  "vatican city": "ğŸ‡»ğŸ‡¦",
  "venezuela": "ğŸ‡»ğŸ‡ª",
  "vietnam": "ğŸ‡»ğŸ‡³",
  "yemen": "ğŸ‡¾ğŸ‡ª",
  "zambia": "ğŸ‡¿ğŸ‡²",
  "zimbabwe": "ğŸ‡¿ğŸ‡¼"
};



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * ANIMATION CONSTANTS
 */
export const animatedButtonProps = {
  animated: true,
  whileHover: {
    scale: 1.1,
  },
  whileTap: {
    scale: 0.9,
  },
};

/**
 * Fetch DATA
 */

export const HOST_MAIN_SERVER = "http://localhost:8080/api";

export const getMainServerPath = (path: string) => {
    return HOST_MAIN_SERVER + path;
}
export const URL_SHORT_PLAYERS = (pageNumber:number,pageSize:number) => getMainServerPath(`/player?limit=${pageSize}&page=${pageNumber}&sort=-market_value_in_eur&fields=first_name,last_name,image_url,market_value_in_eur,highest_market_value_in_eur&market_value_in_eur={"$ne":null}`);

export const URL_SHORT_PLAYERS_QUERIED = (pageNumber:number,pageSize:number,filters:PlayerSearchFilters):string => {
  const params = new URLSearchParams();
  const {min_market_value_in_eur, max_market_value_in_eur,... others} = filters;
  Object.entries(others).forEach(([key, value]) => {
    if (value !== null && value !== undefined) {
      params.append(key, value);
    }
  });
  if(min_market_value_in_eur !== undefined || max_market_value_in_eur !== undefined){
    const gte = min_market_value_in_eur ?` "$gte": ${min_market_value_in_eur}` : "";
    const lte = max_market_value_in_eur ? ` "$lte": ${max_market_value_in_eur}` : "";
    params.append("market_value_in_eur", ` {${gte}${min_market_value_in_eur !== undefined && max_market_value_in_eur !== undefined ? "," : ""}${lte} }`);
  }




  const queryParams = params.toString();
  console.log({queryParams})
  return getMainServerPath(`/player?${queryParams}&limit=${pageSize}&page=${pageNumber}&sort=-market_value_in_eur&fields=first_name,last_name,image_url,market_value_in_eur,highest_market_value_in_eur`);
}
export const URL_SHORT_TEAMS = (pageNumber:number,pageSize:number)  => getMainServerPath(`/club?page=${pageNumber}&pagesize=${pageSize}`);

export const URL_ROOM_FROM_USER = (userId:string) => getMainServerPath(`/room/user/${userId}`);

export const URL_NEW_MESSAGE = (roomId:string) => getMainServerPath(`/room/newMessage/${roomId}`);

export const URL_CREATE_ROOM = getMainServerPath("/room");

export const URL_JOIN_ROOM = (roomId:string) => getMainServerPath(`/room/join/${roomId}`);

export const URL_LEAVE_ROOM = (roomId:string) => getMainServerPath(`/room/leave/${roomId}`);

export const URL_PLAYER_INFO = (playerID:string) => getMainServerPath(`/player/${playerID}`);

export const URL_CLUB_INFO = (teamID:string) => getMainServerPath(`/club/${teamID}`);

export const URL_COMPETITIONS_NAME = getMainServerPath("/competitions/names");

export const URL_GAMES = (filters: QueryFilters) => {
  const params = new URLSearchParams();
  Object.entries(filters).forEach(([key, value]) => {
    if (value !== null && value !== undefined) {
      params.append(key, value);
    }
  });
  const queryString = params.toString();
  return getMainServerPath(`/game?${queryString}&sort=-season`);
}


export const URL_GAME_EVENTS = (gameId:string, pagesize: number) => getMainServerPath(`/game/${gameId}/events?limit=${pagesize}&page=1`);
/**
 * TODO:
 * 1. Erase player section
 * 2. Make more persistent navigation trace
 */

export const URL_PLAYER_EVENTS = (playerID: string) => getMainServerPath(`/gameEvents?player_id=${playerID}`);

export const URL_GAME_BY_ID = (gameID: string) => getMainServerPath(`/game/${gameID}`)

export const URL_NATIONALITIES = getMainServerPath("/player/nationalities");

export const URL_MIN_MAX_MARKET_VALUE = getMainServerPath("/player/market_value_in_eur/minmax");
