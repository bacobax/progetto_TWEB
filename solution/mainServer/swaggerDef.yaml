openapi: 3.0.0
info:
  title: Football Manager API
  version: 1.0.0
  description: This is a simple CRUD API application made with Express and documented with Swagger

security:
  - bearerAuth: []
servers:
  - url: http://localhost:8080/api
components:
  schemas:
    Appearence:
      $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'
    Game:
        $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'
    GameEvent:
        $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
    GameLineup:
        $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
    Player:
        $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
    PlayerValuation:
        $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
    ChatRoom:
        $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
    UserProfile:
        $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserProfile'
    UserLoginRequest:
        $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserLoginRequest'
    UserLoginResponse:
        $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserLoginResponse'
    UserResetPasswordRequest:
        $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserResetPasswordRequest'
paths:
  /appearence:
    get:
      tags:
        - Appearence
      description: Use to request all appearences
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/game_id'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/player_id'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/player_name'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/player_club_id'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/player_current_club_id'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/date'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/competition_id'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/yellow_cards'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/red_cards'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/goals'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/assists'
        - $ref: '/models/swaggerSchemas/appearence.yaml#/parameters/minutes_played'

      responses:
        200:
          description: A successful response
    post:
      tags:
        - Appearence
      description: Use to create a new appearence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'

      responses:
        200:
          description: A successful response
  /appearence/{id}:
    get:
      tags:
        - Appearence
      description: Use to request one appearence
      parameters:
        - name: id
          in: path
          description: Appearence ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'
    patch:
      tags:
        - Appearence
      description: Use to update one appearence
      parameters:
        - name: id
          in: path
          description: Appearence ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'
    delete:
      tags:
        - Appearence
      description: Use to delete one appearence
      parameters:
        - name: id
          in: path
          description: Appearence ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/appearence.yaml#/components/schemas/Appearence'
  /game:
    get:
      tags:
        - Game
      description: Use to request all games
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/game_id'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/home_club_id'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/away_club_id'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/home_club_goals'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/away_club_goals'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/home_club_position'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/away_club_position'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/stadium'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/attendance'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/referee'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/url'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/home_club_formation'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/away_club_formation'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/home_club_name'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/away_club_name'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/aggregate'
        - $ref: '/models/swaggerSchemas/game.yaml#/parameters/competition_type'

      responses:
        200:
          description: A successful response
    post:
      tags:
        - Game
      description: Use to create a new game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'

      responses:
        200:
          description: A successful response
  /game/{id}:
    get:
      tags:
        - Game
      description: Use to request one game
      parameters:
        - name: id
          in: path
          description: Game ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'
    patch:
      tags:
        - Game
      description: Use to update one game
      parameters:
        - name: id
          in: path
          description: Game ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'
    delete:
      tags:
        - Game
      description: Use to delete one game
      parameters:
        - name: id
          in: path
          description: Game ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/game.yaml#/components/schemas/Game'
  /game/{id}/events:
    get:
      tags:
        - GameEvent
      description: Use to request all game events
      parameters:
        - name: id
          in: path
          description: Game ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
  /gameEvent:
    get:
      #same as above
      tags:
         - GameEvent
      description: Use to request all game events
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/date'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/game_id'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/minute'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/type'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/club_id'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/player_id'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/description'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/player_in_id'
        - $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/parameters/player_assist_id'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
    post:
        tags:
            - GameEvent
        description: Use to create a new game event
        requestBody:
          content:
            application/json:
                schema:
                  $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'

        responses:
            200:
              description: A successful response
              content:
                application/json:
                    schema:
                        $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
  /gameEvent/{id}:
    get:
      tags:
        - GameEvent
      description: Use to request one game event
      parameters:
        - name: id
          in: path
          description: Game Event ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
    patch:
      tags:
        - GameEvent
      description: Use to update one game event
      parameters:
        - name: id
          in: path
          description: Game Event ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
    delete:
      tags:
        - GameEvent
      description: Use to delete one game event
      parameters:
        - name: id
          in: path
          description: Game Event ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameEvent.yaml#/components/schemas/GameEvent'
  /gameLineup:
    get:
      tags:
        - GameLineup
      description: Use to request all game lineups
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/game_id'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/club_id'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/type'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/number'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/player_id'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/player_name'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/team_captain'
        - $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/parameters/position'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
    post:
      tags:
        - GameLineup
      description: Use to create a new game lineup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
  /gameLineup/{id}:
    get:
      tags:
        - GameLineup
      description: Use to request one game lineup
      parameters:
        - name: id
          in: path
          description: Game Lineup ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
    patch:
      tags:
        - GameLineup
      description: Use to update one game lineup
      parameters:
        - name: id
          in: path
          description: Game Lineup ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
    delete:
      tags:
        - GameLineup
      description: Use to delete one game lineup
      parameters:
        - name: id
          in: path
          description: Game Lineup ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/gameLineup.yaml#/components/schemas/GameLineup'
  /player:
    get:
      tags:
        - Player
      description: Use to request all players
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/first_name'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/last_name'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/last_season'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/player_code'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/country_of_birth'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/city_of_birth'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/country_of_citizenship'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/date_of_birth'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/sub_position'
        - $ref: '/models/swaggerSchemas/player.yaml#/components/parameters/position'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
    post:
      tags:
        - Player
      description: Use to create a new player
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
  /player/{id}:
    get:
      tags:
        - Player
      description: Use to request one player
      parameters:
        - name: id
          in: path
          description: Player ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
    patch:
      tags:
        - Player
      description: Use to update one player
      parameters:
        - name: id
          in: path
          description: Player ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
    delete:
      tags:
        - Player
      description: Use to delete one player
      parameters:
        - name: id
          in: path
          description: Player ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
  /player/name/{name}:
    get:
      tags:
        - Player
      description: Use to request one player by name (the player's research is made checking if name param is a substring of the player's full name)
      parameters:
        - name: name
          in: path
          description: Player name
          required: true
          example: messi
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '/models/swaggerSchemas/player.yaml#/components/schemas/Player'
  /player/clubsMarketValue:
    get:
      tags:
        - Player
        - Club
      description: use to request all the club IDs each one with it's total market value based on the players that play in that club
      responses:
          200:
            description: A successful response
            content:
                application/json:
                  schema:
                      type: array
                      items:
                        type: object
                        properties:
                            _id:
                              type: number
                              description: Club ID
                              example: 1
                            totalMarketValue:
                              type: number
                              description: Total market value of the club
                              example: 100000000
  /player/valuations:
    get:
      tags:
        - Player
        - PlayerValuation
      description: Use to request all player valuations
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/player_id'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/last_season'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/datetime'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/date'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/dateweek'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/market_value_in_eur'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/current_club_id'
        - $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/parameters/player_club_domestic_competition_id'
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
    post:
      tags:
        - Player
        - PlayerValuation
      description: Use to create a new player valuation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
  /player/valuations/{id}:
    get:
      tags:
        - Player
        - PlayerValuation
      description: Use to request one player valuation
      parameters:
        - name: id
          in: path
          description: Player Valuation ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
    patch:
      tags:
        - Player
        - PlayerValuation
      description: Use to update one player valuation
      parameters:
        - name: id
          in: path
          description: Player Valuation ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
    delete:
      tags:
        - Player
        - PlayerValuation
      description: Use to delete one player valuation
      parameters:
        - name: id
          in: path
          description: Player Valuation ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    $ref: '/models/swaggerSchemas/playerValuation.yaml#/components/schemas/PlayerValuation'
  /room:
    get:
      tags:
        - Room
      description: Use to request all rooms
      parameters:
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/page'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/sort'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/limit'
        - $ref: '/models/swaggerSchemas/apiFeaturesParams.yaml#/parameters/fields'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/name'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/description'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/members'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/messages'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/createdAt'
        - $ref: '/models/swaggerSchemas/room.yaml#/components/parameters/admin'
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
    post:
      tags:
        - Room
      description: Use to create a new room
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
  /room/{id}:
    get:
      tags:
        - Room
      description: Use to request one room
      parameters:
        - name: id
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
    patch:
      tags:
        - Room
      description: Use to update one room
      parameters:
        - name: id
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
    delete:
      tags:
        - Room
      description: Use to delete one room
      parameters:
        - name: id
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
  /room/user/{id}:
    get:
      tags:
        - Room
      description: Use to request all rooms of a user
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          example: 6574bc5d0a8453403804feea
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
  /room/newMessage/{roomID}: #i want to protect this with bearer JWT token
    post:
      tags:
        - Room
      description: Use to create a new message in a room
      parameters:
        - name: roomID
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  description: From id of the message
                  example: '5f9d1b4b2f6f1f0e5c1d7a0a'
                text:
                  type: string
                  description: Text of the message
                  example: 'Hello'
      security:
        - bearerAuth: []
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  from:
                    type: string
                    description: From id of the message
                    example: '5f9d1b4b2f6f1f0e5c1d7a0a'
                  text:
                    type: string
                    description: Text of the message
                    example: 'Hello'
  /room/join/{roomID}:
    post:
      tags:
        - Room
      description: Use to join a room
      parameters:
        - name: roomID
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  description: User ID
                  example: '5f9d1b4b2f6f1f0e5c1d7a0a'
      security:
        - bearerAuth: []
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                    description: User ID
                    example: '5f9d1b4b2f6f1f0e5c1d7a0a'
  /room/leave/{roomID}:
    post:
      tags:
        - Room
      description: Use to leave a room
      parameters:
        - name: roomID
          in: path
          description: Room ID
          required: true
          example: 6574bc5d0a8453403804feea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  description: User ID
                  example: '5f9d1b4b2f6f1f0e5c1d7a0a'
      security:
        - bearerAuth: []
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                    description: User ID
                    example: '5f9d1b4b2f6f1f0e5c1d7a0a'
  /room/search/{name}:
    get:
      tags:
        - Room
      description: Use to request all rooms that match the name param (the room's research is made checking if name param is a substring of the room's name)
      parameters:
        - name: name
          in: path
          description: Room name
          required: true
          example: room
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '/models/swaggerSchemas/room.yaml#/components/schemas/ChatRoom'
  /user/signup:
    post:
      tags:
        - User
      description: Use to signup a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserProfile'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserLoginResponse'
  /user/login:
    post:
      tags:
        - User
      description: Use to login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserLoginRequest'

      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserLoginResponse'
  /user/forgotPassword:
    post: #only email field in body
        tags:
            - User
        description: Use to send a email in order to reset password of a user, the email will contain following link, http://localhost:3000/resetPassword/{resetToken}
        requestBody:
            content:
              application/json:
                  schema:
                    $ref: '/models/swaggerSchemas/user.yaml#/components/schemas/UserResetPasswordRequest'

        responses:
            200:
              description: A successful response
              content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            message:
                              type: string
                              description: Message of the response
                              example: 'Token sent to email'
                            status:
                              type: string
                              description: Status of the response
                              example: 'success'
  /user/resetPassword/{token}:

    patch:
        tags:
            - User
        description: Use to reset password of a user
        parameters:
            - name: token
              in: path
              description: Reset token
              required: true
              example: 6574bc5d0a8453403804feea
        responses:
            200:
              description: A successful response
              content:
                  application/json:
                    schema:
                        type: object
                        properties:
                            token:
                              type: string
                              description: Token of the response
                              example: '6574bc5d0a8453403804feea'
                            status:
                              type: string
                              description: Status of the response
                              example: 'success'
  /playerStat/{id}:
    get:
      tags:
        - Player
      description: return some statistics for one player

      parameters:
        - name: id
          in: path
          description: player ID
          required: true
          example: 6574baf3975bb4cdf6a05aee
      responses:
        200:
          description: A successful response
          content:
              application/json:
                schema:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "success"
                      data:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "6574baf3975bb4cdf6a05aee"
                          first_name:
                            type: string
                            example: "Vladyslav"
                          last_name:
                            type: string
                            example: "Supryaga"
                          last_season:
                            type: string
                            example: "2023"
                          player_code:
                            type: string
                            example: "vladyslav-supryaga"
                          country_of_birth:
                            type: string
                            example: "Ukraine"
                          city_of_birth:
                            type: string
                            example: "Sarata, Odesa Oblast"
                          country_of_citizenship:
                            type: string
                            example: "Ukraine"
                          date_of_birth:
                            type: string
                            example: "2000-02-15"
                          sub_position:
                            type: string
                            example: "Centre-Forward"
                          position:
                            type: string
                            example: "Attack"
                          foot:
                            type: string
                            example: "right"
                          height_in_cm:
                            type: string
                            example: "185"
                          market_value_in_eur:
                            type: integer
                            example: 1000000
                          highest_market_value_in_eur:
                            type: integer
                            example: 7500000
                          contract_expiration_date:
                            type: string
                            example: "2026-06-30 00:00:00"
                          agent_name:
                            type: string
                            nullable: true
                          image_url:
                            type: string
                            example: "https://img.a.transfermarkt.technology/portrait/header/419061-1665388396.png?lm=1"
                          url:
                            type: string
                            example: "https://www.transfermarkt.co.uk/vladyslav-supryaga/profil/spieler/419061"
                          __v:
                            type: integer
                            example: 0
                          stats:
                            type: object
                            additionalProperties:
                              type: object
                              properties:
                                goals:
                                  type: integer
                                assists:
                                  type: integer
                                yellow_cards:
                                  type: integer
                                red_cards:
                                  type: integer
                                minutes_played:
                                  type: integer
                                appearances:
                                  type: integer
                                competitionName:
                                  type: string
                          lineupsCount:
                            type: object
                            additionalProperties:
                              type: integer
                          totalStats:
                            type: object
                            properties:
                              goals:
                                type: integer
                              assists:
                                type: integer
                              yellow_cards:
                                type: integer
                              red_cards:
                                type: integer
                              minutes_played:
                                type: integer
                          market_values_in_eur:
                            type: array
                            items:
                              type: object
                              properties:
                                market_value_in_eur:
                                  type: integer
                                date:
                                  type: string
                          clubName:
                            type: string
                            example: "Futbolniy Klub Dynamo Kyiv"
  /clubStat/{id}:
    get:
      tags:
        - Club
      description: return some statistics for one club
      parameters:
        - name: id
          in: path
          description: club ID
          schema:
            type: integer
            example: 338
          required: true
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      clubId:
                        type: integer
                        example: 338
                      clubCode:
                        type: string
                        example: "dynamo-kiew"
                      name:
                        type: string
                        example: "Futbolniy Klub Dynamo Kyiv"
                      totalMarketValue:
                        type: integer
                        example: 88725000
                      squadSize:
                        type: string
                        example: "27"
                      averageAge:
                        type: string
                        example: "24.3"
                      foreignersNumber:
                        type: string
                        example: "3"
                      foreignersPercentage:
                        type: string
                        example: "11.1"
                      nationalTeamPlayers:
                        type: string
                        example: "8"
                      stadiumName:
                        type: string
                        example: "Valeriy Lobanovsky Stadion"
                      stadiumSeats:
                        type: string
                        example: "16873"
                      netTransferRecord:
                        type: string
                        example: "+€1.20m"
                      coachName:
                        type: string
                        nullable: true
                      lastSeason:
                        type: string
                        example: "2023"
                      url:
                        type: string
                        example: "https://www.transfermarkt.co.uk/dynamo-kiew/startseite/verein/338"
                      domesticCompetition:
                        type: object
                        properties:
                          competitionId:
                            type: string
                            example: "UKR1"
                          competitionCode:
                            type: string
                            example: "premier-liga"
                          name:
                            type: string
                            example: "premier-liga"
                          subType:
                            type: string
                            example: "first_tier"
                          type:
                            type: string
                            example: "domestic_league"
                          countryId:
                            type: string
                            example: "177"
                          countryName:
                            type: string
                            example: "Ukraine"
                          domesticLeagueCode:
                            type: string
                            example: "UKR1"
                          confederation:
                            type: string
                            example: "europa"
                          url:
                            type: string
                            example: "https://www.transfermarkt.co.uk/premier-liga/startseite/wettbewerb/UKR1"
                      players:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "6574baf3975bb4cdf6a02818"
                            first_name:
                              type: string
                              nullable: true
                            last_name:
                              type: string
                              example: "Dudu"
                            country_of_citizenship:
                              type: string
                              example: "Brazil"
                            date_of_birth:
                              type: string
                              example: "1992-01-07"
                            position:
                              type: string
                              example: "Attack"
                            market_value_in_eur:
                              type: integer
                              example: 9000000
                            contract_expiration_date:
                              type: string
                              example: "2026-01-31 00:00:00"
                            id:
                              type: string
                              example: "6574baf3975bb4cdf6a02818"
  /search/{text}:
    get:
      tags:
        - Player
        - Club
      description: return players and clubs that match the text param (the research is made checking if text param is a substring of the player's full name or club's name)
      parameters:
        - name: text
          in: path
          description: text to search
          required: true
          example: messi
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  clubs:
                    type: array
                    items:
                      type: object
                      properties:
                        clubId:
                          type: integer
                          example: 12
                        name:
                          type: string
                          example: "Associazione Sportiva Roma"
                  players:
                    type: array
                    items:
                      type: object
                      properties:
                        playerId:
                          type: string
                          example: "6574baf3975bb4cdf6a00bde"
                        name:
                          type: string
                          example: "Thomas Hansen"


